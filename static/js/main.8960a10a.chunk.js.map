{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","color","other","Box","props","r","g","b","QuoteBox","div","dark","App","state","quote","getRandomQuote","getRandomColor","bind","newQuote","hexToRgb","quotes","length","Math","floor","random","colorOptions","this","setState","hex","result","exec","parseInt","m","className","light","id","primary","console","log","getQuoteBoxStyle","Typography","author","Button","value","as","Link","target","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iucAUA,IAAMA,EAAYC,YAAO,cAAGC,MAAH,IAAaC,EAAb,gCAAyB,kBAACC,EAAA,EAAQD,IAAzCF,CAAH,IAOY,SAAAI,GAAK,OAAIA,EAAMH,MAAMI,GAAM,SAAAD,GAAK,OAAIA,EAAMH,MAAMK,GAAM,SAAAF,GAAK,OAAIA,EAAMH,MAAMM,IAKhGC,EAAWR,IAAOS,IAAV,IAMkB,SAAAL,GAAK,OAAIA,EAAMM,KAAKL,GAAM,SAAAD,GAAK,OAAIA,EAAMM,KAAKJ,GAAM,SAAAF,GAAK,OAAIA,EAAMM,KAAKH,GAC7E,SAAAH,GAAK,OAAIA,EAAMH,MAAMI,GAAM,SAAAD,GAAK,OAAIA,EAAMH,MAAMK,GAAM,SAAAF,GAAK,OAAIA,EAAMH,MAAMM,IA+EvFI,E,YA/Db,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAEDQ,MAAQ,CACXC,MAAO,EAAKC,iBACZb,MAAO,EAAKc,kBAGd,EAAKD,eAAiB,EAAKA,eAAeE,KAApB,gBACtB,EAAKD,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,SAAiB,EAAKA,SAASD,KAAd,gBACtB,EAAKE,SAAiB,EAAKA,SAASF,KAAd,gBAXL,E,8EAgBjB,GAAIG,EAAOC,OAGX,OAAOD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOC,W,uCAIhD,GAAII,EAAaJ,OAGjB,OAAOI,EAAaH,KAAKC,MAAMD,KAAKE,SAAWC,EAAaJ,W,iCAI5DK,KAAKC,SAAS,CACZb,MAAOY,KAAKX,iBACZb,MAAOwB,KAAKV,qB,+BAIPY,GACP,IAAIC,EAAS,4CAA4CC,KAAKF,GAC9D,OAAOC,EAAS,CACdvB,EAAGyB,SAASF,EAAO,GAAI,IACvBtB,EAAGwB,SAASF,EAAO,GAAI,IACvBrB,EAAGuB,SAASF,EAAO,GAAI,KACrB,O,+BAKJ,OACE,kBAAC7B,EAAD,CAAWgC,EAAE,OAAOC,UAAU,MAAM/B,MAAOwB,KAAKP,SAASO,KAAKb,MAAMX,MAAMgC,QACxE,kBAACzB,EAAD,CAAU0B,GAAG,YAAYxB,KAAMe,KAAKP,SAASO,KAAKb,MAAMX,MAAMS,MAAOT,MAAOwB,KAAKP,SAASO,KAAKb,MAAMX,MAAMkC,UACxGC,QAAQC,IAAIZ,KAAKa,kBAClB,kBAACC,EAAA,EAAD,KACE,yBAAKL,GAAG,QAAR,WAAoBT,KAAKb,MAAMC,MAAMA,MAArC,MACA,yBAAKqB,GAAG,UAAR,YAAuBT,KAAKb,MAAMC,MAAM2B,UAE1C,kBAACC,EAAA,EAAD,CAAQC,MAAM,aAAYC,GAAIC,IAAMC,OAAO,SAASC,KAAI,gDAA2CrB,KAAKb,MAAMC,MAAMA,MAA5D,mBAAoFmB,UAAU,uBAAuBE,GAAG,eAAhL,cACA,kBAACO,EAAA,EAAD,CAAQP,GAAG,YAAYa,QAAStB,KAAKR,UAArC,mB,GAzDQ+B,IAAMC,WChCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8960a10a.chunk.js","sourcesContent":["import React from 'react';\r\nimport quotes from './quotes.json';\r\nimport colorOptions from './colorOptions.json';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@material-ui/core/Link';\r\nimport 'typeface-roboto';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Box } from '@material-ui/core'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled(({ color, ...other }) => <Box {...other} />)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  height: 100vh;\r\n\r\n  background-color: rgba(${props => props.color.r}, ${props => props.color.g}, ${props => props.color.b}, 0.05);\r\n\r\n  \r\n`\r\n\r\nconst QuoteBox = styled.div`\r\n  margin: 5em;\r\n  padding: 25px;\r\n  opacity: 1;\r\n  max-width: 30%;\r\n\r\n  border-left: 7px solid rgba(${props => props.dark.r}, ${props => props.dark.g}, ${props => props.dark.b}, 1);\r\n  background-color: rgba(${props => props.color.r}, ${props => props.color.g}, ${props => props.color.b}, 1);\r\n\r\n  @media (max-width: 768px) {\r\n    max-width: 65%;\r\n  }\r\n\r\n  @media (max-width: 1024px) {\r\n    max-width: 50%;\r\n  }\r\n\r\n  @media (max-width: 1440px) {\r\n    max width: 40%;\r\n  }\r\n`\r\n\r\nclass App extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      quote: this.getRandomQuote(),\r\n      color: this.getRandomColor()\r\n    }\r\n\r\n    this.getRandomQuote = this.getRandomQuote.bind(this);\r\n    this.getRandomColor = this.getRandomColor.bind(this);\r\n    this.newQuote       = this.newQuote.bind(this);\r\n    this.hexToRgb       = this.hexToRgb.bind(this);\r\n  }\r\n\r\n  \r\n  getRandomQuote() {\r\n    if(!quotes.length) {\r\n      return;\r\n    }\r\n    return quotes[Math.floor(Math.random() * quotes.length)];\r\n  }\r\n\r\n  getRandomColor() {\r\n    if(!colorOptions.length)\r\n      return;\r\n\r\n    return colorOptions[Math.floor(Math.random() * colorOptions.length)];\r\n  }\r\n\r\n  newQuote() {\r\n    this.setState({\r\n      quote: this.getRandomQuote(),\r\n      color: this.getRandomColor()\r\n    })\r\n  }\r\n\r\n  hexToRgb(hex) {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n      r: parseInt(result[1], 16),\r\n      g: parseInt(result[2], 16),\r\n      b: parseInt(result[3], 16)\r\n    } : null;\r\n  }\r\n\r\n  \r\n  render(){\r\n    return (\r\n      <Container m='auto' className=\"App\" color={this.hexToRgb(this.state.color.light)}>\r\n        <QuoteBox id=\"quote-box\" dark={this.hexToRgb(this.state.color.dark)} color={this.hexToRgb(this.state.color.primary)} >\r\n          {console.log(this.getQuoteBoxStyle)}\r\n          <Typography>\r\n            <div id=\"text\">{`\"${this.state.quote.quote}\"`}</div>\r\n            <div id=\"author\">{`- ${this.state.quote.author}`}</div>\r\n          </Typography>\r\n          <Button value='Tweet this'as={Link} target='_blank' href={`https://twitter.com/intent/tweet?text=${this.state.quote.quote}&hashtags=quote`} className='twitter-share-button' id='tweet-quote'>Tweet this</Button>\r\n          <Button id='new-quote' onClick={this.newQuote}>New quote</Button>\r\n        </QuoteBox>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}